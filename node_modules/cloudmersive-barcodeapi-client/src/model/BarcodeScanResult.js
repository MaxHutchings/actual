/**
 * barcodeapi
 * Barcode APIs let you generate barcode images, and recognize values from images of barcodes.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CloudmersiveBarcodeapiClient) {
      root.CloudmersiveBarcodeapiClient = {};
    }
    root.CloudmersiveBarcodeapiClient.BarcodeScanResult = factory(root.CloudmersiveBarcodeapiClient.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The BarcodeScanResult model module.
   * @module model/BarcodeScanResult
   * @version 1.1.5
   */

  /**
   * Constructs a new <code>BarcodeScanResult</code>.
   * Result of the barcode scan
   * @alias module:model/BarcodeScanResult
   * @class
   */
  var exports = function() {
    var _this = this;




  };

  /**
   * Constructs a <code>BarcodeScanResult</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/BarcodeScanResult} obj Optional instance to populate.
   * @return {module:model/BarcodeScanResult} The populated <code>BarcodeScanResult</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('Successful')) {
        obj['Successful'] = ApiClient.convertToType(data['Successful'], 'Boolean');
      }
      if (data.hasOwnProperty('BarcodeType')) {
        obj['BarcodeType'] = ApiClient.convertToType(data['BarcodeType'], 'String');
      }
      if (data.hasOwnProperty('RawText')) {
        obj['RawText'] = ApiClient.convertToType(data['RawText'], 'String');
      }
    }
    return obj;
  }

  /**
   * True if the operation was successful, false otherwise
   * @member {Boolean} Successful
   */
  exports.prototype['Successful'] = undefined;
  /**
   * The type of the barcode; possible values are AZTEC, CODABAR, CODE_39, CODE_93, CODE_128, DATA_MATRIX, EAN_8, EAN_13, ITF, MAXICODE, PDF_417, QR_CODE, RSS_14, RSS_EXPANDED, UPC_A, UPC_E, All_1D, UPC_EAN_EXTENSION, MSI, PLESSEY, IMB
   * @member {String} BarcodeType
   */
  exports.prototype['BarcodeType'] = undefined;
  /**
   * The barcode text
   * @member {String} RawText
   */
  exports.prototype['RawText'] = undefined;



  return exports;
}));


